version: '3.8'

services:
  aistudio-proxy:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: aistudio-proxy
    restart: unless-stopped
    ports:
      - "2048:2048"  # Main API port
      - "9090:9090"  # Metrics port
    environment:
      # Server Configuration
      - SERVER__HOST=0.0.0.0
      - SERVER__PORT=2048
      - SERVER__WORKERS=1
      - SERVER__DEBUG=false
      
      # Browser Configuration
      - BROWSER__HEADLESS=true
      - BROWSER__PORT=9222
      - BROWSER__TIMEOUT=30000
      
      # Logging Configuration
      - LOG__LEVEL=INFO
      - LOG__FORMAT=json
      - LOG__FILE_PATH=/app/logs/aistudio-proxy.log
      
      # Performance Configuration
      - PERF__MAX_CONCURRENT_REQUESTS=50
      - PERF__REQUEST_TIMEOUT=60
      
      # Security Configuration
      - SECURITY__RATE_LIMIT=100
      - SECURITY__CORS_ORIGINS=*
      
      # Monitoring Configuration
      - MONITORING__ENABLE_METRICS=true
      - MONITORING__METRICS_PORT=9090
    volumes:
      # Persistent data
      - ./auth:/app/auth:ro
      - ./logs:/app/logs
      - ./profiles:/app/profiles
      
      # Configuration override
      - ./configs/config.yaml:/app/configs/config.yaml:ro
      
      # Temporary files
      - aistudio-tmp:/app/tmp
    networks:
      - aistudio-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2048/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: aistudio-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - aistudio-network
    profiles:
      - monitoring

  # Optional: Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: aistudio-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - aistudio-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

  # Optional: Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: aistudio-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - aistudio-network
    profiles:
      - caching

networks:
  aistudio-network:
    driver: bridge

volumes:
  aistudio-tmp:
  prometheus-data:
  grafana-data:
  redis-data:
