[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "aistudio-proxy"
version = "0.1.0"
description = "Lightweight Google AI Studio proxy with OpenAI API compatibility"
authors = [
    {name = "AIStudioProxy Team", email = "team@aistudioproxy.com"}
]
readme = "README.md"
license = "MIT"
requires-python = ">=3.11,<3.14"
keywords = ["ai", "proxy", "openai", "google", "gemini"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]

dependencies = [
    # Web框架
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.30.0",
    
    # 数据验证
    "pydantic>=2.8.0",
    "pydantic-settings>=2.4.0",
    
    # 浏览器自动化
    "playwright>=1.45.0",
    "camoufox>=0.4.0",
    
    # 工具库
    "pyyaml>=6.0.0",
    "structlog>=24.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "black>=24.0.0",
    "mypy>=1.8.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "pre-commit>=3.6.0",
]

[project.urls]
Homepage = "https://github.com/kay-ou/AIStudioProxy"
Repository = "https://github.com/kay-ou/AIStudioProxy"
Documentation = "https://github.com/kay-ou/AIStudioProxy/docs"
Issues = "https://github.com/kay-ou/AIStudioProxy/issues"

[project.scripts]
aistudio-proxy = "src.main:main"

# Poetry配置 (如果使用Poetry)
[tool.poetry]
name = "aistudio-proxy"
version = "0.1.0"
description = "Lightweight Google AI Studio proxy with OpenAI API compatibility"
authors = ["AIStudioProxy Team <team@aistudioproxy.com>"]
readme = "README.md"
license = "MIT"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11,<3.14"
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.30.0"}
pydantic = "^2.8.0"
pydantic-settings = "^2.4.0"
playwright = "^1.45.0"
camoufox = "^0.4.0"
pyyaml = "^6.0.0"
structlog = "^24.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"
psutil = "^5.9.0"
httpx = "^0.25.0"
black = "^24.0.0"
mypy = "^1.8.0"
isort = "^5.13.0"
flake8 = "^7.0.0"
pre-commit = "^3.6.0"

[tool.poetry.scripts]
aistudio-proxy = "src.main:main"

# 代码质量工具配置
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["fastapi", "pydantic", "playwright", "structlog"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "camoufox.*",
    "playwright.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-v",
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".env",
]
